{"version":3,"sources":["assets/img/robot1.png","assets/img/y31.png","assets/img/robot2.png","assets/img/robot3.png","assets/img/robot.webm","components/Siderbar.js","context/ToogleContex.js","components/WalletConnet.js","components/Topbar.js","components/Footer.js","Layout/Layout.js","componetsButton/BalanceNftDashbord.js","components/Card.js","componetsButton/CreatePool.js","componetsButton/EnvioToken.js","pages/Dashboard.js","componetsButton/Pool0.js","componetsButton/Pool1.js","componetsButton/Pool2.js","componetsButton/Pool3.js","componetsButton/BalanceNftP.js","pages/Workers.js","componetsButton/Mint0.js","componetsButton/Mint1.js","componetsButton/Mint2.js","componetsButton/Mint3.js","pages/BountyNFT.js","components/CarSup.js","pages/Support.js","pages/MarketPlace.js","App.js","index.js","assets/img/ISOLOGOTIPO.png"],"names":["module","exports","__webpack_require__","p","Siderbar","location","useLocation","_React$useState","React","useState","pathname","_React$useState2","Object","slicedToArray","activate","setactivate","react_default","a","createElement","className","src","logo","alt","NavLinks","map","item","path","key","react_router_dom","to","onClick","name","ToogleContext","createContext","ToogleProvider","_ref","children","toogle","settoogle","Provider","value","WalletConnet","props","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","connectWallet","asyncToGenerator","regenerator_default","mark","_callee4","wrap","_context4","prev","next","window","ethereum","request","method","catch","err","console","log","stop","state","account","contract","totalSupply","balance","contract1","balance1","contract2","loadWeb3","loadBlockchainData","web3","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","setState","networkData","nftToken","networks","networkData1","caosToken","networkData2","nftStake","abi","abi1","abi2","address","address1","address2","Contract","slice","Component","Topbar","_React$useContext","useContext","id","index_esm","components_WalletConnet","Footer","Layout","Siderbar_Siderbar","Topbar_Topbar","components_Footer","BalanceNftDashbord","methods","balanceOf","i","tokenOfOwnerByIndex","nftId","nftID","nft10","nft2","numero","pool","baseURI","fetch","then","response","json","data","document","getElementById","innerHTML","concat","image","Card","content","require","Dashboard","balanceBNB","getBalance","utils","BN","textContent","totalMint","componetsButton_BalanceNftDashbord","Pool0","claimReward","ActiveStakes","idestake","sent","stakedTokenByIndex","claimRewards","send","from","gas","on","hash","receipt","revertReason","Pool","nft5","element","querySelectorAll","forEach","button","addEventListener","_this2","enterStaking","approve","ids","dataset","pool2","Pool1","Pool2","Pool3","BalanceNftP","componetsButton_Pool0","componetsButton_Pool1","componetsButton_Pool2","componetsButton_Pool3","Workers","componetsButton_BalanceNftP","Mint3","PRICE3","price33","returnRobot3","robot3","price3","mint2","style","color","width","robot","margin","mint3","BountyNFT","componetsButton_Mint3","CardSup","href","class","Support","CarSup","MarketPlace","App","ToogleContex_ToogleProvider","src_Layout_Layout","react_router","pages_Dashboard","pages_Workers","pages_BountyNFT","pages_MarketPlace","pages_Support","ReactDOM","render","StrictMode","src_App_0"],"mappings":"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","file":"static/js/main.ec647628.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/robot1.4e9a341b.png\";","module.exports = __webpack_public_path__ + \"static/media/y31.4a02357e.png\";","module.exports = __webpack_public_path__ + \"static/media/robot2.122bb0ca.png\";","module.exports = __webpack_public_path__ + \"static/media/robot3.bb659b19.png\";","module.exports = __webpack_public_path__ + \"static/media/robot.fc25a67d.webm\";","import React from 'react'\nimport logo  from  '../assets/img/ISOLOGOTIPO.png'\nimport { Link ,useLocation } from 'react-router-dom'\nimport NavLinks  from '../assets/Json/Navlink.json'\n\n\nexport const Siderbar = () => {\n\nlet location = useLocation();\nconst[activate,setactivate]=React.useState(location.pathname);\n\n    return ( \n    <div className= 'siderbar' >\n        <div className='siderbar-header'>\n            <div className=\"siderbar-logo-container\">\n                <div className='logo-container'>\n                    <img className=\"logo-sidebar \"src={logo} alt=\"\" />\n                </div>\n      \n              \n            </div>\n        </div>\n        <div className=\"siderbar-body\">\n            <ul className=\"navigation-list\">\n                    {\n                    NavLinks.map((item) => (\n                        <li className={ activate === item.path ? 'navigation-list-item activate':'navigation-list-item'} key={item.key}  >\n                            <Link className='navigation-link ' to={''+item.path} onClick={()=>{setactivate(''+item.path)} }  >\n                                <p>{''+item.name}</p >\n                            </Link>\n                        </li>\n                    ))\n                    }           \n            </ul>\n        </div>\n    </div>\n    )\n}\n","import React from 'react';\n\nexport const ToogleContext=React.createContext();\n\nexport const ToogleProvider= ({children})=>{\n    const [toogle,settoogle]=React.useState(true)\n    return(\n    \n        <ToogleContext.Provider value={{ toogle, settoogle }}>\n            { children }\n        </ToogleContext.Provider>\n        )\n    \n}\n\n","import React, { Component } from 'react';\nimport nftToken from \"../abis/NFTERC721.json\"\nimport caosToken from \"../abis/TestERC20.json\"\nimport nftStake from \"../abis/NFTStake.json\"\nimport Web3 from 'web3';\n\nclass WalletConnet extends Component {\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if(window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n\n    else {\n      window.alert('¡Considera usar Metamask!')\n    }\n\n  }\n\n  async loadBlockchainData(){\n    const web3 = window.web3\n    // Cargar una cuenta\n    const accounts = await web3.eth.getAccounts()\n    this.setState({account: accounts[0]})\n    const networkId = 56\n    const networkData = nftToken.networks[networkId]\n    const networkData1 = caosToken.networks[networkId]\n    const networkData2 = nftStake.networks[networkId]\n\n          if(networkData,networkData1,networkData2) {\n            const abi = nftToken.abi\n            const abi1 = caosToken.abi\n            const abi2 = nftStake.abi\n      \n            const address = networkData.address\n            const address1 = networkData1.address\n            const address2 = networkData2.address\n          \n            const contract = new web3.eth.Contract(abi, address)\n            const contract1 = new web3.eth.Contract(abi1, address1)\n            const contract2 = new web3.eth.Contract(abi2, address2)\n          \n\n\n            this.setState({contract})\n            this.setState({contract1})\n            this.setState({contract2})\n\n\n           \n          \n            \n          } else {\n            window.alert('¡Smart Contract no desplegado en la red!')\n          }\n        }\n\n\n        constructor(props) {\n          super(props)\n          this.state = {\n            account: 'CONNECT TO WALLET',\n            contract: null,\n            totalSupply: 0,\n            balance: \"\",\n            contract1 : null,\n            balance1: \"\",\n            contract2 : null,\n        \n          }\n        }\n\n\n        connectWallet = async () =>{\n          await window.ethereum.request({method: \"eth_requestAccounts\"}).catch((err)=>{\n            console.log(err)\n          })\n\n        }\n\n  render(){\n\n    return (\n      <button onClick={this.connectWallet} className=\"bouton\">{this.state.account.slice(0,10) + \"...\" + (this.state.account.slice(35,42)) } </button>\n      )\n    }\n  }\n\nexport default WalletConnet","import React from 'react'\nimport {FaBars} from 'react-icons/fa'\nimport { ToogleContext } from './../context/ToogleContex';\nimport WalletConnet from './WalletConnet';\n\n\nexport const Topbar = () => {\n  const {toogle,settoogle}=React.useContext(ToogleContext);\n  return (\n    <div className='navigationBar'>\n        <button id=\"sidebartoogle\" className='btn sidebartoogle' onClick={()=>{settoogle(!toogle)}}  >\n        <FaBars/>\n        </button>\n            <WalletConnet/>\n       \n        \n    </div>\n  )\n}\n","import React from 'react'\n\nconst Footer = () => {\n  return (\n    <div className='footer'>\n      <p>Created By OrbeGameStudios | All Rights Reserved!</p>\n    </div>\n  )\n}\n\nexport default Footer","import React from 'react'\nimport { Siderbar } from '../components/Siderbar'\nimport { Topbar } from '../components/Topbar'\nimport { ToogleContext } from './../context/ToogleContex';\nimport Footer from './../components/Footer';\n\nconst Layout = ({children}) => {\n  const {toogle}=React.useContext(ToogleContext);\n  return (\n\n        \n        <div className={toogle ?  'active-panel' :'panel'}>\n              <Siderbar />\n            <div className= 'top-bar'>\n              <Topbar/>\n            </div>\n            <div className= 'main-content' >\n                {children}\n            </div> \n            <Footer/>  \n        </div>\n        \n\n    \n  )\n}\n\nexport default Layout","import React, { Component } from 'react';\r\nimport nftToken from \"../abis/NFTERC721.json\"\r\nimport caosToken from \"../abis/TestERC20.json\"\r\nimport nftStake from \"../abis/NFTStake.json\"\r\nimport Web3 from 'web3';\r\nimport '../assets/css/Workers.css'\r\n\r\n\r\n\r\n\r\nclass BalanceNftDashbord extends Component  {\r\n    async componentWillMount() {\r\n        await this.loadWeb3()\r\n        await this.loadBlockchainData()\r\n      }\r\n    \r\n      async loadWeb3() {\r\n        if(window.ethereum) {\r\n          window.web3 = new Web3(window.ethereum)\r\n          await window.ethereum.enable()\r\n        }\r\n    \r\n        else if (window.web3) {\r\n          window.web3 = new Web3(window.web3.currentProvider)\r\n        }\r\n    \r\n        else {\r\n          window.alert('¡Considera usar Metamask!')\r\n        }\r\n    \r\n      }\r\n    \r\n      async loadBlockchainData(){\r\n        const web3 = window.web3\r\n        // Cargar una cuenta\r\n        const accounts = await web3.eth.getAccounts()\r\n        this.setState({account: accounts[0]})\r\n        const networkId = 56;\r\n        const networkData = nftToken.networks[networkId]\r\n        const networkData1 = caosToken.networks[networkId]\r\n        const networkData2 = nftStake.networks[networkId]\r\n    \r\n              if(networkData,networkData1,networkData2) {\r\n                const abi = nftToken.abi\r\n                const abi1 = caosToken.abi\r\n                const abi2 = nftStake.abi\r\n          \r\n                const address = networkData.address\r\n                const address1 = networkData1.address\r\n                const address2 = networkData2.address\r\n              \r\n                const contract = new web3.eth.Contract(abi, address)\r\n                const contract1 = new web3.eth.Contract(abi1, address1)\r\n                const contract2 = new web3.eth.Contract(abi2, address2)\r\n              \r\n                const balance = await contract.methods.balanceOf(accounts[0]).call()\r\n                this.setState({contract})\r\n                this.setState({contract1})\r\n                this.setState({contract2})\r\n\r\n\r\n                for (var i=1; i<= balance; i++ ){     \r\n                    var nftId = await contract.methods.tokenOfOwnerByIndex(accounts[0],i-1).call()\r\n                  \r\n                    var nft10 = await contract.methods.nftID(nftId).call()\r\n                    var nft2 = nft10.numero\r\n                    var nft5 = nft10.pool\r\n                    \r\n                            \r\n                    if(nft2 == 0){\r\n                      nft2= \"QmcufygVjEcF4kmjs3EMVDRkcG9WDhprANyF5DVbaRrBoX\"\r\n                    }else if(nft2 == 1){\r\n                      nft2= \"QmZf34aYSP4T846ZDYmWs3tNqGVujvwd3Zq46i8mC15nzd\"\r\n                    }else if(nft2 == 2){\r\n                      nft2= \"Qme7Y2g3kmRpjy5bFAdGYHLhkLjajwFseJHKHXenQjFmtA\"\r\n                     } else if(nft2 == 3){\r\n                        nft2= \"QmYzg7dVurMFbXSF11mBwtzKLgtXtoGFdNz8Whg63PoDh6\"\r\n                     }\r\n                    var baseURI = await contract.methods.baseURI().call()\r\n                    var apiJSON = baseURI + nft2;\r\n                    var url = apiJSON;\r\n                    fetch(url)\r\n                        .then(response => response.json())\r\n                        .then(data =>{\r\n              \r\n                            \r\n                      \r\n                             let element = document.getElementById(\"elem\");\r\n                             \r\n                              element.innerHTML+= `<div className='card ' class=\"col-md-3 col-lg-3  col-xm-12 \" \">\r\n                              <img style=\"width:100%\" src =\"${data.image}\"></img>\r\n                \r\n   \r\n                              </div>`\r\n                 \r\n                 \r\n                       \r\n                           \r\n                            \r\n                 \r\n        \r\n                        }).catch(err=>console.log(err))            \r\n                    }\r\n                \r\n    \r\n              \r\n                \r\n              } else {\r\n                window.alert('¡Smart Contract no desplegado en la red!')\r\n              }\r\n            }\r\n    \r\n    \r\n       \r\n            constructor(props) {\r\n                super(props)\r\n                this.state = {\r\n                  account: '',\r\n                  contract: null,\r\n                  totalSupply: 0,\r\n                  balance: \"\",\r\n                  contract1 : null,\r\n                  balance1: \"\",\r\n                  contract2 : null,\r\n              \r\n                }\r\n              }\r\n    \r\n           \r\n\r\n  \r\n  \r\n    render(){\r\n    return (\r\n\r\n\r\n\r\n\r\n        \r\n      <div className=\"container\">\r\n      \r\n\r\n     \r\n        <div id=\"elem\" className='row'>\r\n\r\n\r\n        </div>\r\n\r\n      \r\n     \r\n  \r\n      </div>\r\n    );\r\n    }\r\n  }\r\n  \r\n  export default BalanceNftDashbord;\r\n  ","import React from 'react'\r\n\r\nexport default function Card({name ,content}) {\r\n  return (\r\n    <div className='col-md-3 pt-2  col-sm-6'>\r\n    <div className=\" card-container \">\r\n       <div className='card'>\r\n          <div className='card-content'>\r\n            <div className = 'name-card'> <h2>{name}</h2> </div>\r\n            <div className= 'contentBx'>\r\n                {name==='Account' ? <h4 >{content}</h4>:<h3 >{content}</h3> }\r\n                 \r\n            </div>\r\n           </div>\r\n             \r\n\r\n       </div>\r\n       </div>\r\n</div>\r\n  )\r\n}\r\n","import React, { Component } from 'react';\r\nimport nftToken from \"../abis/NFTERC721.json\"\r\nimport caosToken from \"../abis/TestERC20.json\"\r\nimport nftStake from \"../abis/NFTStake.json\"\r\nimport Web3 from 'web3';\r\n\r\n\r\n\r\nclass CreatePool extends Component  {\r\n    async componentWillMount() {\r\n        await this.loadWeb3()\r\n        await this.loadBlockchainData()\r\n      }\r\n    \r\n      async loadWeb3() {\r\n        if(window.ethereum) {\r\n          window.web3 = new Web3(window.ethereum)\r\n          await window.ethereum.enable()\r\n        }\r\n    \r\n        else if (window.web3) {\r\n          window.web3 = new Web3(window.web3.currentProvider)\r\n        }\r\n    \r\n        else {\r\n          window.alert('¡Considera usar Metamask!')\r\n        }\r\n    \r\n      }\r\n    \r\n      async loadBlockchainData(){\r\n        const web3 = window.web3\r\n        // Cargar una cuenta\r\n        const accounts = await web3.eth.getAccounts()\r\n        this.setState({account: accounts[0]})\r\n        const networkId = 56\r\n        const networkData = nftToken.networks[networkId]\r\n        const networkData1 = caosToken.networks[networkId]\r\n        const networkData2 = nftStake.networks[networkId]\r\n    \r\n              if(networkData,networkData1,networkData2) {\r\n                const abi = nftToken.abi\r\n                const abi1 = caosToken.abi\r\n                const abi2 = nftStake.abi\r\n          \r\n                const address = networkData.address\r\n                const address1 = networkData1.address\r\n                const address2 = networkData2.address\r\n              \r\n                const contract = new web3.eth.Contract(abi, address)\r\n                const contract1 = new web3.eth.Contract(abi1, address1)\r\n                const contract2 = new web3.eth.Contract(abi2, address2)\r\n              \r\n                const balance = await contract.methods.balanceOf(accounts[0]).call()\r\n           \r\n                this.setState({contract})\r\n                this.setState({contract1})\r\n                this.setState({contract2})\r\n\r\n\r\n               \r\n              \r\n                \r\n              } else {\r\n                window.alert('¡Smart Contract no desplegado en la red!')\r\n              }\r\n            }\r\n    \r\n    \r\n       \r\n            constructor(props) {\r\n                super(props)\r\n                this.state = {\r\n                  account: '',\r\n                  contract: null,\r\n                  totalSupply: 0,\r\n                  balance: \"\",\r\n                  contract1 : null,\r\n                  balance1: \"\",\r\n                  contract2 : null,\r\n              \r\n                }\r\n              }\r\n\r\n\r\n               createPool = () => {\r\n\r\n                const currentTimeStamp = Math.floor(Date.now() / 1000);\r\n                const startTime = currentTimeStamp \r\n                const endingDate = startTime + 30 * 24 * 60 * 60 * 30;\r\n                \r\n              \r\n\r\n                const pool = {\r\n                  \"nftContract\" :\"0x0701F3B71d40B4E9aCcA4801c8fE90473b04F522\" , \r\n                  \"rewardContract\": \"0x5D739A457ca4dc3b10Cd1A6c566686C700A7cc96\", \r\n                  \"rewardSupply\": \"1000\",\r\n                  \"cycle\": \"5\",\r\n                  \"rewardPerCycle\": \"10\",\r\n                  \"maxCycles\": \"25\",\r\n                  \"endingDate\": endingDate,\r\n                  \"isActive\": true,\r\n                  \"multiplierSigner\":\"0xcc73DBc8d2fecB3622afb37a27e3e606A88B6377\",\r\n                  \"maxStakePerWallet\": \"3\"\r\n                }\r\n              \r\n               this.state.contract2.methods.createPool(pool)\r\n               .send({ from: this.state.account, gas: 1000000})\r\n              }\r\n  \r\n  \r\n    render(){\r\n    return (\r\n\r\n\r\n\r\n\r\n        \r\n      <div className=\"\">\r\n        \r\n     \r\n        <button onClick={this.createPool}>\r\n            crateeepoolll\r\n        </button>\r\n  \r\n      </div>\r\n    );\r\n    }\r\n  }\r\n  \r\n  export default CreatePool;","import React, { Component } from 'react';\r\nimport nftToken from \"../abis/NFTERC721.json\"\r\nimport caosToken from \"../abis/TestERC20.json\"\r\nimport nftStake from \"../abis/NFTStake.json\"\r\nimport Web3 from 'web3';\r\n\r\n\r\n\r\nclass EnvioToken extends Component  {\r\n    async componentWillMount() {\r\n        await this.loadWeb3()\r\n        await this.loadBlockchainData()\r\n      }\r\n    \r\n      async loadWeb3() {\r\n        if(window.ethereum) {\r\n          window.web3 = new Web3(window.ethereum)\r\n          await window.ethereum.enable()\r\n        }\r\n    \r\n        else if (window.web3) {\r\n          window.web3 = new Web3(window.web3.currentProvider)\r\n        }\r\n    \r\n        else {\r\n          window.alert('¡Considera usar Metamask!')\r\n        }\r\n    \r\n      }\r\n    \r\n      async loadBlockchainData(){\r\n        const web3 = window.web3\r\n        // Cargar una cuenta\r\n        const accounts = await web3.eth.getAccounts()\r\n        this.setState({account: accounts[0]})\r\n        const networkId = 56\r\n        const networkData = nftToken.networks[networkId]\r\n        const networkData1 = caosToken.networks[networkId]\r\n        const networkData2 = nftStake.networks[networkId]\r\n    \r\n              if(networkData,networkData1,networkData2) {\r\n                const abi = nftToken.abi\r\n                const abi1 = caosToken.abi\r\n                const abi2 = nftStake.abi\r\n          \r\n                const address = networkData.address\r\n                const address1 = networkData1.address\r\n                const address2 = networkData2.address\r\n              \r\n                const contract = new web3.eth.Contract(abi, address)\r\n                const contract1 = new web3.eth.Contract(abi1, address1)\r\n                const contract2 = new web3.eth.Contract(abi2, address2)\r\n              \r\n                const balance = await contract.methods.balanceOf(accounts[0]).call()\r\n\r\n                this.setState({contract})\r\n                this.setState({contract1})\r\n                this.setState({contract2})\r\n\r\n\r\n               \r\n              \r\n                \r\n              } else {\r\n                window.alert('¡Smart Contract no desplegado en la red!')\r\n              }\r\n            }\r\n    \r\n    \r\n       \r\n            constructor(props) {\r\n                super(props)\r\n                this.state = {\r\n                  account: '',\r\n                  contract: null,\r\n                  totalSupply: 0,\r\n                  balance: \"\",\r\n                  contract1 : null,\r\n                  balance1: \"\",\r\n                  contract2 : null,\r\n              \r\n                }\r\n              }\r\n\r\n\r\n              envioToken = () => {\r\n\r\n                \r\n                this.state.contract1.methods.approve(\"0x8Ec9E8820153841074E321E9bD701dc6f5078F93\", 10000 )\r\n                .send({ from: this.state.account, gas: 1000000})\r\n              }\r\n  \r\n  \r\n    render(){\r\n    return (\r\n\r\n\r\n\r\n\r\n        \r\n      <div className=\"\">\r\n        \r\n     \r\n        <button onClick={this.envioToken}>\r\n            ENVIOO TOKENNN\r\n        </button>\r\n  \r\n      </div>\r\n    );\r\n    }\r\n  }\r\n  \r\n  export default EnvioToken;","import React,  { Component } from 'react'\nimport nftToken from \"../abis/NFTERC721.json\"\nimport caosToken from \"../abis/TestERC20.json\"\nimport nftStake from \"../abis/NFTStake.json\"\nimport Web3 from 'web3';\nimport BalanceNftDashbord from \"../componetsButton/BalanceNftDashbord\"\nimport '../assets/css/Dashboard.css'\nimport Card from '../components/Card';\nimport CreatePool from '../componetsButton/CreatePool';\nimport EnvioToken from '../componetsButton/EnvioToken';\nconst BN = require('bn.js');\n\n\n\nclass Dashboard extends Component {\n\n  async componentWillMount() {\n    await this.loadWeb3()\n    await this.loadBlockchainData()\n  }\n\n  async loadWeb3() {\n    if(window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n\n    else {\n      window.alert('¡Considera usar Metamask!')\n    }\n\n  }\n\n\n  async loadBlockchainData(){\n    const web3 = window.web3\n    // Cargar una cuenta\n    const accounts = await web3.eth.getAccounts()\n    const balanceBNB = await web3.eth.getBalance(accounts[0])/1000000000000000000\n    this.setState({balanceBNB: balanceBNB})\n    this.setState({account: accounts[0]})\n    const networkId = 56\n    const networkData = nftToken.networks[networkId]\n    const networkData1 = caosToken.networks[networkId]\n    const networkData2 = nftStake.networks[networkId]\n\n          if(networkData,networkData1,networkData2) {\n            const abi = nftToken.abi\n            const abi1 = caosToken.abi\n         \n      \n            const address = networkData.address\n            const address1 = networkData1.address\n            \n            var BN = web3.utils.BN;\n          \n            const contract = new web3.eth.Contract(abi, address)\n            const contract1 = new web3.eth.Contract(abi1, address1)\n          \n            const balance = await contract.methods.balanceOf(accounts[0]).call()\n            document.getElementById(\"balance\").textContent=balance\n           \n            this.setState({contract})\n\n            const totalmint = await contract.methods.totalMint().call()\n            \n\n\n            var balance1 = await contract1.methods.balanceOf(accounts[0]).call()\n            document.getElementById(\"totalToken\").textContent = balance1/1000000000000000000\n\n       \n           \n            this.setState({contract1})\n\n          \n            \n          } else {\n            window.alert('¡Smart Contract no desplegado en la red!')\n          }\n        }\n\n        constructor(props) {\n          super(props)\n          this.state = {\n            account: '',\n            contract: null,\n            totalSupply: 0,\n            balance: \"\",\n            contract1 : null,\n            balance1: \"\",\n            contract2 : null,\n            balanceBNB : \"\"\n           \n          }\n        }\n\n\n  render(){\n  return (\n<div className = 'Page-dashboard container'>\n          <div className='tittle-card ' >\n            <h1 className='tittle pt-4 text-center '> DASHBOARD </h1>\n\n\n          </div>\n          \n          <div className='row pt-4'>\n         \n            <Card name='Account' content={this.state.account}/>\n            <div className='col-md-3 pt-2  col-sm-6'>\n                            <div className=\" card-container \">\n                            <div className='card'>\n                            <div className='card-content'>\n                            <div className = 'name-card'> <h2>Balance NFT</h2> </div>\n                            <div className= 'contentBx'>\n                              <h3 id=\"balance\" ></h3> \n                            \n                      </div>\n                     </div>\n                          \n\n                   </div>\n               </div>\n            </div>\n         <div className='col-md-3 pt-2  col-sm-6'>\n                <div className=\" card-container \">\n                <div className='card'>\n                <div className='card-content'>\n                <div className = 'name-card'> <h2>Total Token</h2> </div>\n                <div className= 'contentBx'>\n                  <h3 id=\"totalToken\" ></h3> \n                 \n                    </div>\n                  </div>\n             \n\n                  </div>\n                  </div>\n            </div>\n            <Card name='Total BNB' content={this.state.balanceBNB}/>\n          </div>\n \n     \n      \n          <h2 className=\"pt-4 text-white\">ROBOTS Y NFT</h2>\n          <div className='row'>\n         \n            <BalanceNftDashbord></BalanceNftDashbord>\n          </div>\n          \n\n\n\n\n\n    </div>\n  )\n  }\n}\n\nexport default Dashboard\n\n","\r\n\r\nimport '../assets/css/BalanceNft.css'\r\nimport '../assets/css/Workers.css'\r\nimport React, { Component } from 'react';\r\nimport nftToken from \"../abis/NFTERC721.json\"\r\nimport caosToken from \"../abis/TestERC20.json\"\r\nimport nftStake from \"../abis/NFTStake.json\"\r\nimport Web3 from 'web3';\r\n\r\n\r\nclass Pool0 extends Component {\r\n    async componentWillMount() {\r\n        await this.loadWeb3()\r\n        await this.loadBlockchainData()\r\n      }\r\n    \r\n      async loadWeb3() {\r\n        if(window.ethereum) {\r\n          window.web3 = new Web3(window.ethereum)\r\n          await window.ethereum.enable()\r\n        }\r\n    \r\n        else if (window.web3) {\r\n          window.web3 = new Web3(window.web3.currentProvider)\r\n        }\r\n    \r\n        else {\r\n          window.alert('¡Considera usar Metamask!')\r\n        }\r\n    \r\n      }\r\n    \r\n      async loadBlockchainData(){\r\n        const web3 = window.web3\r\n        // Cargar una cuenta\r\n        const accounts = await web3.eth.getAccounts()\r\n        this.setState({account: accounts[0]})\r\n        const networkId = 56\r\n        const networkData = nftToken.networks[networkId]\r\n        const networkData1 = caosToken.networks[networkId]\r\n        const networkData2 = nftStake.networks[networkId]\r\n    \r\n              if(networkData,networkData1,networkData2) {\r\n                const abi = nftToken.abi\r\n                const abi1 = caosToken.abi\r\n                const abi2 = nftStake.abi\r\n          \r\n                const address = networkData.address\r\n                const address1 = networkData1.address\r\n                const address2 = networkData2.address\r\n              \r\n                const contract = new web3.eth.Contract(abi, address)\r\n                const contract1 = new web3.eth.Contract(abi1, address1)\r\n                const contract2 = new web3.eth.Contract(abi2, address2)\r\n              \r\n                const balance = await contract.methods.balanceOf(accounts[0]).call()\r\n              \r\n\r\n                const Pool = await contract2.methods.ActiveStakes(0, accounts[0] ).call()\r\n                document.getElementById(\"poolNumero\").textContent=Pool;\r\n\r\n          \r\n\r\n\r\n                this.setState({contract})\r\n                this.setState({contract1})\r\n                this.setState({contract2})\r\n\r\n                for (var i=1; i<= balance; i++ ){     \r\n                  var nftId = await contract.methods.tokenOfOwnerByIndex(accounts[0],i-1).call()\r\n                \r\n                  var nft10 = await contract.methods.nftID(nftId).call()\r\n                  var nft2 = nft10.numero\r\n                  var nft5 = nft10.pool\r\n                  \r\n                          \r\n                  if(nft2 == 0){\r\n                    nft2= \"QmcufygVjEcF4kmjs3EMVDRkcG9WDhprANyF5DVbaRrBoX\"\r\n                  }else if(nft2 == 1){\r\n                    nft2= \"QmZf34aYSP4T846ZDYmWs3tNqGVujvwd3Zq46i8mC15nzd\"\r\n                  }else if(nft2 == 2){\r\n                    nft2= \"Qme7Y2g3kmRpjy5bFAdGYHLhkLjajwFseJHKHXenQjFmtA\"\r\n                   } else if(nft2 == 3){\r\n                      nft2= \"QmYzg7dVurMFbXSF11mBwtzKLgtXtoGFdNz8Whg63PoDh6\"\r\n                   }\r\n                  var baseURI = await contract.methods.baseURI().call()\r\n                  var apiJSON = baseURI + nft2;\r\n                  var url = apiJSON;\r\n                  fetch(url)\r\n                      .then(response => response.json())\r\n                      .then(data =>{\r\n            \r\n                          \r\n                    \r\n                           let element = document.getElementById(\"elem\");\r\n                           \r\n                           if(nft5 == 0){\r\n\r\n                          \r\n                            element.innerHTML+= `  <div className='card 'style=\"text-align:center\" >\r\n                            <img style=\"width:100%; border-radius: 10px\" src =\"${data.image}\"></img>\r\n                            <div style=\"display:flex; \">\r\n                            <button class='btn-pool2 mx-auto approve0 ' data-id='${nftId}' > appoveeee </button>\r\n                            <button class='btn-pool2 mx-auto stake0 '  data-id='${nftId}'  data-pool='${nft5}' > stakeee </button>\r\n                            </div>\r\n                            </div>`\r\n               \r\n                            document.querySelectorAll(\".stake0\").forEach((button) => {\r\n                              button.addEventListener(\"click\", this.enterStaking);  \r\n                           \r\n                          });\r\n                          document.querySelectorAll(\".approve0\").forEach((button) => {\r\n                           button.addEventListener(\"click\", this.approve)\r\n                          });\r\n      \r\n                        }\r\n                         \r\n                          \r\n               \r\n      \r\n                      }).catch(err=>console.log(err))            \r\n                  }\r\n               \r\n              \r\n                \r\n              } else {\r\n                window.alert('¡Smart Contract no desplegado en la red!')\r\n              }\r\n            }\r\n    \r\n    \r\n       \r\n            constructor(props) {\r\n                super(props)\r\n                this.state = {\r\n                  account: '',\r\n                  contract: null,\r\n                  totalSupply: 0,\r\n                  balance: \"\",\r\n                  contract1 : null,\r\n                  balance1: \"\",\r\n                  contract2 : null,\r\n\r\n              \r\n                }\r\n              }\r\n\r\n              \r\n              async approve() {\r\n\r\n                const web3 = window.web3\r\n                const networkId = 56\r\n                const networkData = nftToken.networks[networkId]\r\n                const abi = nftToken.abi\r\n                const address = networkData.address\r\n                const contract = new web3.eth.Contract(abi, address)\r\n                const accounts = await web3.eth.getAccounts()\r\n                \r\n                let ids = this.dataset.id;\r\n                console.log(ids)\r\n            \r\n              await contract.methods.approve(\"0x8Ec9E8820153841074E321E9bD701dc6f5078F93\",ids)\r\n                  .send({ from: accounts[0], gas: 1111110 }) \r\n                  .on('transactionHash', function(hash){\r\n                    document.getElementById(\"web3_message\").textContent=\"enviandooooo...\";\r\n                  })\r\n                  .on('receipt', function(receipt){\r\n                    document.getElementById(\"web3_message\").textContent=\"Success! enviado finished.\";    })\r\n                  .catch((revertReason) => {\r\n                   //getRevertReason(revertReason.receipt.transactionHash);\r\n                  });\r\n              }\r\n\r\n              async enterStaking() {\r\n\r\n                const web3 = window.web3\r\n                const networkId = 56\r\n                const networkData2 = nftStake.networks[networkId]\r\n                const abi2 = nftStake.abi\r\n                const address2 = networkData2.address\r\n                const contract2 = new web3.eth.Contract(abi2, address2)\r\n                const accounts = await web3.eth.getAccounts()\r\n\r\n                let ids = this.dataset.id;\r\n                let pool2 = this.dataset.pool;\r\n                console.log(pool2)\r\n              \r\n                await contract2.methods.enterStaking(pool2,[ids])\r\n                .send({ from: accounts[0], gas: 1111110  })\r\n              \r\n                  .on('transactionHash', function(hash){\r\n                    document.getElementById(\"web3_message\").textContent=\"stalkeandooo...\";\r\n                  })\r\n                  .on('receipt', function(receipt){\r\n                    document.getElementById(\"web3_message\").textContent=\"Success! stalkingg finished.\";    })\r\n                  .catch((revertReason) => {\r\n                  //  getRevertReason(revertReason.receipt.transactionHash);\r\n                  });\r\n              \r\n              }\r\n\r\n           claimReward = async () => {\r\n                const web3 = window.web3\r\n                const networkId = 56\r\n                const networkData2 = nftStake.networks[networkId]\r\n                const abi2 = nftStake.abi\r\n                const address2 = networkData2.address\r\n                const contract2 = new web3.eth.Contract(abi2, address2)\r\n\r\n                 let ActiveStakes = await contract2.methods.ActiveStakes(0, this.state.account).call()\r\n                    for (var i=1; i<= ActiveStakes; i++ ){\r\n                    var idestake = await contract2.methods.stakedTokenByIndex(0,this.state.account, [i-1]).call()\r\n                    \r\n       \r\n              \r\n                }\r\n               \r\n               this.state.contract2.methods.claimRewards(0,[idestake])\r\n                .send({ from: this.state.account, gas: 1000000 })\r\n              \r\n              \r\n                  .on('transactionHash', function(hash){\r\n                    document.getElementById(\"web3_message\").textContent=\"levantoandoooo...\";\r\n                  })\r\n                  .on('receipt', function(receipt){\r\n                    document.getElementById(\"web3_message\").textContent=\"Success! Minting finished.\";    })\r\n                  .catch((revertReason) => {\r\n                 //   getRevertReason(revertReason.receipt.transactionHash);\r\n                  });\r\n              \r\n              }\r\n\r\n\r\n\r\n              render(){\r\n          return (\r\n    <div className='card-pool-active row mt-2 '  > \r\n    <div className='text-pool col-md-8 col-sm-12'>\r\n     <h1 className='tittle-pool'>POOL : COMUN </h1> \r\n     <h3><span id='poolNumero'> - </span> /4</h3>\r\n \r\n\r\n    </div>\r\n    <div className='container-btn col-md-4 col-sm-12 mx-auto'>\r\n    <button className='btn-pool col-sm-12  mt-4' >\r\n         UnStake\r\n     </button>\r\n     <button  onClick={this.claimReward} className='btn-pool col-sm-12 mt-2' >\r\n         Claim Reward\r\n     </button>\r\n     </div> \r\n\r\n     <div className='nft-item col-md-12 row   mx-auto  '>\r\n         <div className=' col-lg-3 col-md-6 mx-auto mint ' id=\"elem\">\r\n         \r\n         </div>\r\n     \r\n       \r\n     </div> \r\n\r\n </div>\r\n    \r\n  \r\n  )\r\n}\r\n}\r\n\r\nexport default Pool0","import '../assets/css/BalanceNft.css'\r\n\r\nimport '../assets/css/Workers.css'\r\nimport React, { Component } from 'react';\r\nimport nftToken from \"../abis/NFTERC721.json\"\r\nimport caosToken from \"../abis/TestERC20.json\"\r\nimport nftStake from \"../abis/NFTStake.json\"\r\nimport Web3 from 'web3';\r\n\r\n\r\nclass Pool1 extends Component {\r\n    async componentWillMount() {\r\n        await this.loadWeb3()\r\n        await this.loadBlockchainData()\r\n      }\r\n    \r\n      async loadWeb3() {\r\n        if(window.ethereum) {\r\n          window.web3 = new Web3(window.ethereum)\r\n          await window.ethereum.enable()\r\n        }\r\n    \r\n        else if (window.web3) {\r\n          window.web3 = new Web3(window.web3.currentProvider)\r\n        }\r\n    \r\n        else {\r\n          window.alert('¡Considera usar Metamask!')\r\n        }\r\n    \r\n      }\r\n    \r\n      async loadBlockchainData(){\r\n        const web3 = window.web3\r\n        // Cargar una cuenta\r\n        const accounts = await web3.eth.getAccounts()\r\n        this.setState({account: accounts[0]})\r\n        const networkId = 56\r\n        const networkData = nftToken.networks[networkId]\r\n        const networkData1 = caosToken.networks[networkId]\r\n        const networkData2 = nftStake.networks[networkId]\r\n    \r\n              if(networkData,networkData1,networkData2) {\r\n                const abi = nftToken.abi\r\n                const abi1 = caosToken.abi\r\n                const abi2 = nftStake.abi\r\n          \r\n                const address = networkData.address\r\n                const address1 = networkData1.address\r\n                const address2 = networkData2.address\r\n              \r\n                const contract = new web3.eth.Contract(abi, address)\r\n                const contract1 = new web3.eth.Contract(abi1, address1)\r\n                const contract2 = new web3.eth.Contract(abi2, address2)\r\n              \r\n              \r\n\r\n                const Pool = await contract2.methods.ActiveStakes(1, accounts[0] ).call()\r\n                document.getElementById(\"poolNumero2\").textContent=Pool;\r\n\r\n                const balance = await contract.methods.balanceOf(accounts[0]).call()\r\n\r\n       \r\n\r\n     \r\n\r\n                this.setState({contract})\r\n                this.setState({contract1})\r\n                this.setState({contract2})\r\n\r\n\r\n                for (var i=1; i<= balance; i++ ){     \r\n                  var nftId = await contract.methods.tokenOfOwnerByIndex(accounts[0],i-1).call()\r\n                \r\n                  var nft10 = await contract.methods.nftID(nftId).call()\r\n                  var nft2 = nft10.numero\r\n                  var nft5 = nft10.pool\r\n                  \r\n                          \r\n                  if(nft2 == 0){\r\n                    nft2= \"QmcufygVjEcF4kmjs3EMVDRkcG9WDhprANyF5DVbaRrBoX\"\r\n                  }else if(nft2 == 1){\r\n                    nft2= \"QmZf34aYSP4T846ZDYmWs3tNqGVujvwd3Zq46i8mC15nzd\"\r\n                  }else if(nft2 == 2){\r\n                    nft2= \"Qme7Y2g3kmRpjy5bFAdGYHLhkLjajwFseJHKHXenQjFmtA\"\r\n                   } else if(nft2 == 3){\r\n                      nft2= \"QmYzg7dVurMFbXSF11mBwtzKLgtXtoGFdNz8Whg63PoDh6\"\r\n                   }\r\n                  var baseURI = await contract.methods.baseURI().call()\r\n                  var apiJSON = baseURI + nft2;\r\n                  var url = apiJSON;\r\n                  fetch(url)\r\n                      .then(response => response.json())\r\n                      .then(data =>{\r\n            \r\n                          \r\n                    \r\n                           let element = document.getElementById(\"elem1\");\r\n                           \r\n                           if(nft5 == 1){\r\n\r\n                          \r\n                            element.innerHTML+= `  <div className='card ' style=\"text-align:center\">\r\n                            <img style=\"width:100%;border-radius: 10px \" src =\"${data.image}\"></img>\r\n           \r\n                            <div style=\"display:flex; \">\r\n                            <button class='btn-pool2 mx-auto approve1'  data-id='${nftId}' > appoveeee </button>\r\n                            <button class='btn-pool2 mx-auto stake1'  data-id='${nftId}'  data-pool='${nft5}' > stakeee </button>\r\n                            </div>\r\n                            </div>`\r\n               \r\n                            document.querySelectorAll(\".stake1\").forEach((button) => {\r\n                              button.addEventListener(\"click\", this.enterStaking);  \r\n                           \r\n                          });\r\n                          document.querySelectorAll(\".approve1\").forEach((button) => {\r\n                           button.addEventListener(\"click\", this.approve)\r\n                          });\r\n      \r\n                        }\r\n                         \r\n                          \r\n               \r\n      \r\n                      }).catch(err=>console.log(err))            \r\n                  }\r\n\r\n               \r\n              \r\n                \r\n              } else {\r\n                window.alert('¡Smart Contract no desplegado en la red!')\r\n              }\r\n            }\r\n    \r\n    \r\n       \r\n            constructor(props) {\r\n                super(props)\r\n                this.state = {\r\n                  account: '',\r\n                  contract: null,\r\n                  totalSupply: 0,\r\n                  balance: \"\",\r\n                  contract1 : null,\r\n                  balance1: \"\",\r\n                  contract2 : null,\r\n\r\n              \r\n                }\r\n              }\r\n\r\n\r\n\r\n              async approve() {\r\n\r\n                const web3 = window.web3\r\n                const networkId = 56\r\n                const networkData = nftToken.networks[networkId]\r\n                const abi = nftToken.abi\r\n                const address = networkData.address\r\n                const contract = new web3.eth.Contract(abi, address)\r\n                const accounts = await web3.eth.getAccounts()\r\n                \r\n                let ids = this.dataset.id;\r\n                console.log(ids)\r\n            \r\n              await contract.methods.approve(\"0x2bEb03BF67F091C0405E8d55B48439D4EbfBcF5C\",ids)\r\n                  .send({ from: accounts[0], gas: 1111110 }) \r\n                  .on('transactionHash', function(hash){\r\n                    document.getElementById(\"web3_message\").textContent=\"enviandooooo...\";\r\n                  })\r\n                  .on('receipt', function(receipt){\r\n                    document.getElementById(\"web3_message\").textContent=\"Success! enviado finished.\";    })\r\n                  .catch((revertReason) => {\r\n                   //getRevertReason(revertReason.receipt.transactionHash);\r\n                  });\r\n              }\r\n\r\n              async enterStaking() {\r\n\r\n                const web3 = window.web3\r\n                const networkId = 56\r\n                const networkData2 = nftStake.networks[networkId]\r\n                const abi2 = nftStake.abi\r\n                const address2 = networkData2.address\r\n                const contract2 = new web3.eth.Contract(abi2, address2)\r\n                const accounts = await web3.eth.getAccounts()\r\n\r\n                let ids = this.dataset.id;\r\n                let pool2 = this.dataset.pool;\r\n                console.log(pool2)\r\n              \r\n                await contract2.methods.enterStaking(pool2,[ids])\r\n                .send({ from: accounts[0], gas: 1111110  })\r\n              \r\n                  .on('transactionHash', function(hash){\r\n                    document.getElementById(\"web3_message\").textContent=\"stalkeandooo...\";\r\n                  })\r\n                  .on('receipt', function(receipt){\r\n                    document.getElementById(\"web3_message\").textContent=\"Success! stalkingg finished.\";    })\r\n                  .catch((revertReason) => {\r\n                  //  getRevertReason(revertReason.receipt.transactionHash);\r\n                  });\r\n              \r\n              }\r\n\r\n           claimReward = async () => {\r\n                const web3 = window.web3\r\n                const networkId = 56\r\n                const networkData2 = nftStake.networks[networkId]\r\n                const abi2 = nftStake.abi\r\n                const address2 = networkData2.address\r\n                const contract2 = new web3.eth.Contract(abi2, address2)\r\n\r\n                 let ActiveStakes = await contract2.methods.ActiveStakes(1, this.state.account).call()\r\n                    for (var i=1; i<= ActiveStakes; i++ ){\r\n                    var idestake = await contract2.methods.stakedTokenByIndex(1,this.state.account, [i-1]).call()\r\n                    \r\n       \r\n              \r\n                }\r\n               \r\n               this.state.contract2.methods.claimRewards(1,[idestake])\r\n                .send({ from: this.state.account, gas: 1000000 })\r\n              \r\n              \r\n                  .on('transactionHash', function(hash){\r\n                    document.getElementById(\"web3_message\").textContent=\"levantoandoooo...\";\r\n                  })\r\n                  .on('receipt', function(receipt){\r\n                    document.getElementById(\"web3_message\").textContent=\"Success! Minting finished.\";    })\r\n                  .catch((revertReason) => {\r\n                 //   getRevertReason(revertReason.receipt.transactionHash);\r\n                  });\r\n              \r\n              }\r\n\r\n\r\n\r\n              render(){\r\n          return (\r\n    <div className='card-pool-active row mt-2'> \r\n    <div className='text-pool col-md-8 col-sm-12'>\r\n     <h1 className='tittle-pool'>POOL : RARO </h1> \r\n     <h3><span id='poolNumero2'> - </span> /4</h3>\r\n\r\n    </div>\r\n    <div className='container-btn col-md-4 col-sm-12 mx-auto'>\r\n    <button className='btn-pool col-sm-12  mt-4' >\r\n         UnStake\r\n     </button>\r\n     <button  onClick={this.claimReward} className='btn-pool col-sm-12 mt-2' >\r\n         Claim Reward\r\n     </button>\r\n     </div> \r\n\r\n     <div className='nft-item col-md-12 row   mx-auto  '>\r\n         <div className=' col-lg-3 col-md-6 mx-auto mint ' id=\"elem1\">\r\n          \r\n         </div>\r\n     \r\n       \r\n     </div> \r\n\r\n </div>\r\n    \r\n  \r\n  )\r\n}\r\n}\r\n\r\nexport default Pool1;","import '../assets/css/BalanceNft.css'\r\n\r\nimport '../assets/css/Workers.css'\r\nimport React, { Component } from 'react';\r\nimport nftToken from \"../abis/NFTERC721.json\"\r\nimport caosToken from \"../abis/TestERC20.json\"\r\nimport nftStake from \"../abis/NFTStake.json\"\r\nimport Web3 from 'web3';\r\n\r\n\r\nclass Pool2 extends Component {\r\n    async componentWillMount() {\r\n        await this.loadWeb3()\r\n        await this.loadBlockchainData()\r\n      }\r\n    \r\n      async loadWeb3() {\r\n        if(window.ethereum) {\r\n          window.web3 = new Web3(window.ethereum)\r\n          await window.ethereum.enable()\r\n        }\r\n    \r\n        else if (window.web3) {\r\n          window.web3 = new Web3(window.web3.currentProvider)\r\n        }\r\n    \r\n        else {\r\n          window.alert('¡Considera usar Metamask!')\r\n        }\r\n    \r\n      }\r\n    \r\n      async loadBlockchainData(){\r\n        const web3 = window.web3\r\n        // Cargar una cuenta\r\n        const accounts = await web3.eth.getAccounts()\r\n        this.setState({account: accounts[0]})\r\n        const networkId = 56\r\n        const networkData = nftToken.networks[networkId]\r\n        const networkData1 = caosToken.networks[networkId]\r\n        const networkData2 = nftStake.networks[networkId]\r\n    \r\n              if(networkData,networkData1,networkData2) {\r\n                const abi = nftToken.abi\r\n                const abi1 = caosToken.abi\r\n                const abi2 = nftStake.abi\r\n          \r\n                const address = networkData.address\r\n                const address1 = networkData1.address\r\n                const address2 = networkData2.address\r\n              \r\n                const contract = new web3.eth.Contract(abi, address)\r\n                const contract1 = new web3.eth.Contract(abi1, address1)\r\n                const contract2 = new web3.eth.Contract(abi2, address2)\r\n              \r\n                const balance = await contract.methods.balanceOf(accounts[0]).call()\r\n\r\n                const Pool = await contract2.methods.ActiveStakes(2, accounts[0] ).call()\r\n                document.getElementById(\"poolNumero3\").textContent=Pool;\r\n\r\n     \r\n\r\n                this.setState({contract})\r\n                this.setState({contract1})\r\n                this.setState({contract2})\r\n                for (var i=1; i<= balance; i++ ){     \r\n                  var nftId = await contract.methods.tokenOfOwnerByIndex(accounts[0],i-1).call()\r\n                \r\n                  var nft10 = await contract.methods.nftID(nftId).call()\r\n                  var nft2 = nft10.numero\r\n                  var nft5 = nft10.pool\r\n                  \r\n                  if(nft2 == 0){\r\n                    nft2= \"QmcufygVjEcF4kmjs3EMVDRkcG9WDhprANyF5DVbaRrBoX\"\r\n                  }else if(nft2 == 1){\r\n                    nft2= \"QmZf34aYSP4T846ZDYmWs3tNqGVujvwd3Zq46i8mC15nzd\"\r\n                  }else if(nft2 == 2){\r\n                    nft2= \"Qme7Y2g3kmRpjy5bFAdGYHLhkLjajwFseJHKHXenQjFmtA\"\r\n                   } else if(nft2 == 3){\r\n                      nft2= \"QmYzg7dVurMFbXSF11mBwtzKLgtXtoGFdNz8Whg63PoDh6\"\r\n                   }\r\n                  var baseURI = await contract.methods.baseURI().call()\r\n                  var apiJSON = baseURI + nft2;\r\n                  var url = apiJSON;\r\n                  fetch(url)\r\n                      .then(response => response.json())\r\n                      .then(data =>{\r\n            \r\n\r\n                    \r\n                           let element = document.getElementById(\"elem2\");\r\n                           \r\n                           if(nft5 == 2){\r\n\r\n                          \r\n                            element.innerHTML+= `  <div className='card ' style=\"text-align:center; margin: 0px 5px\">\r\n                            <img style=\"width:100%;border-radius: 10px \" src =\"${data.image}\"></img>\r\n                  \r\n                            <div style=\"display:flex; \">\r\n                            <button class='btn-pool2 mx-auto approve2' data-id='${nftId}' > appoveeee </button>\r\n                            <button class='btn-pool2 mx-auto stake2'  data-id='${nftId}'  data-pool='${nft5}' > stakeee </button>\r\n                            </div>\r\n                            </div>`\r\n               \r\n                            document.querySelectorAll(\".stake2\").forEach((button) => {\r\n                              button.addEventListener(\"click\", this.enterStaking);  \r\n                           \r\n                          });\r\n                          document.querySelectorAll(\".approve2\").forEach((button) => {\r\n                           button.addEventListener(\"click\", this.approve)\r\n                          });\r\n      \r\n                        }\r\n                         \r\n                          \r\n               \r\n      \r\n                      }).catch(err=>console.log(err))            \r\n                  }\r\n\r\n\r\n               \r\n              \r\n                \r\n              } else {\r\n                window.alert('¡Smart Contract no desplegado en la red!')\r\n              }\r\n            }\r\n    \r\n    \r\n       \r\n            constructor(props) {\r\n                super(props)\r\n                this.state = {\r\n                  account: '',\r\n                  contract: null,\r\n                  totalSupply: 0,\r\n                  balance: \"\",\r\n                  contract1 : null,\r\n                  balance1: \"\",\r\n                  contract2 : null,\r\n\r\n              \r\n                }\r\n              }\r\n\r\n              async approve() {\r\n\r\n                const web3 = window.web3\r\n                const networkId = 56\r\n                const networkData = nftToken.networks[networkId]\r\n                const abi = nftToken.abi\r\n                const address = networkData.address\r\n                const contract = new web3.eth.Contract(abi, address)\r\n                const accounts = await web3.eth.getAccounts()\r\n                \r\n                let ids = this.dataset.id;\r\n                console.log(ids)\r\n            \r\n              await contract.methods.approve(\"0x2bEb03BF67F091C0405E8d55B48439D4EbfBcF5C\",ids)\r\n                  .send({ from: accounts[0], gas: 1111110 }) \r\n                  .on('transactionHash', function(hash){\r\n                    document.getElementById(\"web3_message\").textContent=\"enviandooooo...\";\r\n                  })\r\n                  .on('receipt', function(receipt){\r\n                    document.getElementById(\"web3_message\").textContent=\"Success! enviado finished.\";    })\r\n                  .catch((revertReason) => {\r\n                   //getRevertReason(revertReason.receipt.transactionHash);\r\n                  });\r\n              }\r\n\r\n              async enterStaking() {\r\n\r\n                const web3 = window.web3\r\n                const networkId = 56\r\n                const networkData2 = nftStake.networks[networkId]\r\n                const abi2 = nftStake.abi\r\n                const address2 = networkData2.address\r\n                const contract2 = new web3.eth.Contract(abi2, address2)\r\n                const accounts = await web3.eth.getAccounts()\r\n\r\n                let ids = this.dataset.id;\r\n                let pool2 = this.dataset.pool;\r\n                console.log(pool2)\r\n              \r\n                await contract2.methods.enterStaking(pool2,[ids])\r\n                .send({ from: accounts[0], gas: 1111110  })\r\n              \r\n                  .on('transactionHash', function(hash){\r\n                    document.getElementById(\"web3_message\").textContent=\"stalkeandooo...\";\r\n                  })\r\n                  .on('receipt', function(receipt){\r\n                    document.getElementById(\"web3_message\").textContent=\"Success! stalkingg finished.\";    })\r\n                  .catch((revertReason) => {\r\n                  //  getRevertReason(revertReason.receipt.transactionHash);\r\n                  });\r\n              \r\n              }\r\n\r\n           claimReward = async () => {\r\n                const web3 = window.web3\r\n                const networkId = 56\r\n                const networkData2 = nftStake.networks[networkId]\r\n                const abi2 = nftStake.abi\r\n                const address2 = networkData2.address\r\n                const contract2 = new web3.eth.Contract(abi2, address2)\r\n\r\n                 let ActiveStakes = await contract2.methods.ActiveStakes(2, this.state.account).call()\r\n                    for (var i=1; i<= ActiveStakes; i++ ){\r\n                    var idestake = await contract2.methods.stakedTokenByIndex(2,this.state.account, [i-1]).call()\r\n                    \r\n       \r\n              \r\n                }\r\n               \r\n               this.state.contract2.methods.claimRewards(2,[idestake])\r\n                .send({ from: this.state.account, gas: 1000000 })\r\n              \r\n              \r\n                  .on('transactionHash', function(hash){\r\n                    document.getElementById(\"web3_message\").textContent=\"levantoandoooo...\";\r\n                  })\r\n                  .on('receipt', function(receipt){\r\n                    document.getElementById(\"web3_message\").textContent=\"Success! Minting finished.\";    })\r\n                  .catch((revertReason) => {\r\n                 //   getRevertReason(revertReason.receipt.transactionHash);\r\n                  });\r\n              \r\n              }\r\n\r\n\r\n\r\n              render(){\r\n                  return (\r\n                    <div className='card-pool-active row mt-2'> \r\n                    <div className='text-pool col-md-8 col-sm-12'>\r\n                    <h1 className='tittle-pool'>POOL : EPICO </h1> \r\n                    <h3><span id='poolNumero3'> - </span> /4</h3>\r\n                 \r\n                    </div>\r\n                    <div className='container-btn col-md-4 col-sm-12 mx-auto'>\r\n                    <button className='btn-pool col-sm-12  mt-4' >\r\n                        UnStake\r\n                    </button>\r\n                    <button  onClick={this.claimReward} className='btn-pool col-sm-12 mt-2' >\r\n                        Claim Reward\r\n                    </button>\r\n                    </div> \r\n\r\n                    <div className='nft-item col-md-12 row   mx-auto  '>\r\n                        <div className=' col-lg-3 col-md-6 mx-auto mint ' id=\"elem2\">\r\n                            \r\n                        </div>\r\n                    \r\n                      \r\n                    </div> \r\n\r\n                </div>\r\n    \r\n  \r\n  )\r\n}\r\n}\r\n\r\nexport default Pool2;","import '../assets/css/BalanceNft.css'\r\nimport '../assets/css/Workers.css'\r\nimport React, { Component } from 'react';\r\nimport nftToken from \"../abis/NFTERC721.json\"\r\nimport caosToken from \"../abis/TestERC20.json\"\r\nimport nftStake from \"../abis/NFTStake.json\"\r\nimport Web3 from 'web3';\r\n\r\n\r\nclass Pool3 extends Component {\r\n    async componentWillMount() {\r\n        await this.loadWeb3()\r\n        await this.loadBlockchainData()\r\n      }\r\n    \r\n      async loadWeb3() {\r\n        if(window.ethereum) {\r\n          window.web3 = new Web3(window.ethereum)\r\n          await window.ethereum.enable()\r\n        }\r\n    \r\n        else if (window.web3) {\r\n          window.web3 = new Web3(window.web3.currentProvider)\r\n        }\r\n    \r\n        else {\r\n          window.alert('¡Considera usar Metamask!')\r\n        }\r\n    \r\n      }\r\n    \r\n      async loadBlockchainData(){\r\n        const web3 = window.web3\r\n        // Cargar una cuenta\r\n        const accounts = await web3.eth.getAccounts()\r\n        this.setState({account: accounts[0]})\r\n        const networkId = 56\r\n        const networkData = nftToken.networks[networkId]\r\n        const networkData1 = caosToken.networks[networkId]\r\n        const networkData2 = nftStake.networks[networkId]\r\n    \r\n              if(networkData,networkData1,networkData2) {\r\n                const abi = nftToken.abi\r\n                const abi1 = caosToken.abi\r\n                const abi2 = nftStake.abi\r\n          \r\n                const address = networkData.address\r\n                const address1 = networkData1.address\r\n                const address2 = networkData2.address\r\n              \r\n                const contract = new web3.eth.Contract(abi, address)\r\n                const contract1 = new web3.eth.Contract(abi1, address1)\r\n                const contract2 = new web3.eth.Contract(abi2, address2)\r\n              \r\n              \r\n\r\n                const Pool = await contract2.methods.ActiveStakes(3, accounts[0] ).call()\r\n                document.getElementById(\"poolNumero4\").textContent=Pool;\r\n\r\n     \r\n                const balance = await contract.methods.balanceOf(accounts[0]).call()\r\n\r\n                this.setState({contract})\r\n                this.setState({contract1})\r\n                this.setState({contract2})\r\n\r\n\r\n                for (var i=1; i<= balance; i++ ){     \r\n                  var nftId = await contract.methods.tokenOfOwnerByIndex(accounts[0],i-1).call()\r\n                \r\n                  var nft10 = await contract.methods.nftID(nftId).call()\r\n                  var nft2 = nft10.numero\r\n                  var nft5 = nft10.pool\r\n                  \r\n                          \r\n                  if(nft2 == 0){\r\n                    nft2= \"QmcufygVjEcF4kmjs3EMVDRkcG9WDhprANyF5DVbaRrBoX\"\r\n                  }else if(nft2 == 1){\r\n                    nft2= \"QmZf34aYSP4T846ZDYmWs3tNqGVujvwd3Zq46i8mC15nzd\"\r\n                  }else if(nft2 == 2){\r\n                    nft2= \"Qme7Y2g3kmRpjy5bFAdGYHLhkLjajwFseJHKHXenQjFmtA\"\r\n                   } else if(nft2 == 3){\r\n                      nft2= \"QmYzg7dVurMFbXSF11mBwtzKLgtXtoGFdNz8Whg63PoDh6\"\r\n                   }\r\n                  var baseURI = await contract.methods.baseURI().call()\r\n                  var apiJSON = baseURI + nft2;\r\n                  var url = apiJSON;\r\n                  fetch(url)\r\n                      .then(response => response.json())\r\n                      .then(data =>{\r\n            \r\n                          \r\n                    \r\n                           let element = document.getElementById(\"elem3\");\r\n                           \r\n                           if(nft5 == 3){\r\n\r\n                          \r\n                            element.innerHTML+= `  <div className='card ' style=\"text-align:center\"  >\r\n                            <img style=\"width:100%;border-radius: 10px\" src =\"${data.image}\"></img>\r\n       \r\n                            <div style=\"display:flex; \">\r\n                            <button class='btn-pool2 mx-auto approve3'  data-id='${nftId}' > appoveeee </button>\r\n                            <button class='btn-pool2 mx-auto stake3' data-id='${nftId}'  data-pool='${nft5}' > stakeee </button>\r\n                            </div>\r\n                            </div>`\r\n               \r\n                            document.querySelectorAll(\".stake3\").forEach((button) => {\r\n                              button.addEventListener(\"click\", this.enterStaking);  \r\n                           \r\n                          });\r\n                          document.querySelectorAll(\".approve3\").forEach((button) => {\r\n                           button.addEventListener(\"click\", this.approve)\r\n                          });\r\n      \r\n                        }\r\n                         \r\n                          \r\n               \r\n      \r\n                      }).catch(err=>console.log(err))            \r\n                  }\r\n               \r\n\r\n\r\n               \r\n              \r\n                \r\n              } else {\r\n                window.alert('¡Smart Contract no desplegado en la red!')\r\n              }\r\n            }\r\n    \r\n    \r\n       \r\n            constructor(props) {\r\n                super(props)\r\n                this.state = {\r\n                  account: '',\r\n                  contract: null,\r\n                  totalSupply: 0,\r\n                  balance: \"\",\r\n                  contract1 : null,\r\n                  balance1: \"\",\r\n                  contract2 : null,\r\n\r\n              \r\n                }\r\n              }\r\n\r\n              async approve() {\r\n\r\n                const web3 = window.web3\r\n                const networkId = 56\r\n                const networkData = nftToken.networks[networkId]\r\n                const abi = nftToken.abi\r\n                const address = networkData.address\r\n                const contract = new web3.eth.Contract(abi, address)\r\n                const accounts = await web3.eth.getAccounts()\r\n                \r\n                let ids = this.dataset.id;\r\n                console.log(ids)\r\n            \r\n              await contract.methods.approve(\"0x2bEb03BF67F091C0405E8d55B48439D4EbfBcF5C\",ids)\r\n                  .send({ from: accounts[0], gas: 1111110 }) \r\n                  .on('transactionHash', function(hash){\r\n                    document.getElementById(\"web3_message\").textContent=\"enviandooooo...\";\r\n                  })\r\n                  .on('receipt', function(receipt){\r\n                    document.getElementById(\"web3_message\").textContent=\"Success! enviado finished.\";    })\r\n                  .catch((revertReason) => {\r\n                   //getRevertReason(revertReason.receipt.transactionHash);\r\n                  });\r\n              }\r\n\r\n              async enterStaking() {\r\n\r\n                const web3 = window.web3\r\n                const networkId = 56\r\n                const networkData2 = nftStake.networks[networkId]\r\n                const abi2 = nftStake.abi\r\n                const address2 = networkData2.address\r\n                const contract2 = new web3.eth.Contract(abi2, address2)\r\n                const accounts = await web3.eth.getAccounts()\r\n\r\n                let ids = this.dataset.id;\r\n                let pool2 = this.dataset.pool;\r\n                console.log(pool2)\r\n              \r\n                await contract2.methods.enterStaking(pool2,[ids])\r\n                .send({ from: accounts[0], gas: 1111110  })\r\n              \r\n                  .on('transactionHash', function(hash){\r\n                    document.getElementById(\"web3_message\").textContent=\"stalkeandooo...\";\r\n                  })\r\n                  .on('receipt', function(receipt){\r\n                    document.getElementById(\"web3_message\").textContent=\"Success! stalkingg finished.\";    })\r\n                  .catch((revertReason) => {\r\n                  //  getRevertReason(revertReason.receipt.transactionHash);\r\n                  });\r\n              \r\n              }\r\n\r\n           claimReward = async () => {\r\n                const web3 = window.web3\r\n                const networkId = 56\r\n                const networkData2 = nftStake.networks[networkId]\r\n                const abi2 = nftStake.abi\r\n                const address2 = networkData2.address\r\n                const contract2 = new web3.eth.Contract(abi2, address2)\r\n\r\n                 let ActiveStakes = await contract2.methods.ActiveStakes(3, this.state.account).call()\r\n                    for (var i=1; i<= ActiveStakes; i++ ){\r\n                    var idestake = await contract2.methods.stakedTokenByIndex(3,this.state.account, [i-1]).call()\r\n                    \r\n       \r\n              \r\n                }\r\n               \r\n               this.state.contract2.methods.claimRewards(3,[idestake])\r\n                .send({ from: this.state.account, gas: 1000000 })\r\n              \r\n              \r\n                  .on('transactionHash', function(hash){\r\n                    document.getElementById(\"web3_message\").textContent=\"levantoandoooo...\";\r\n                  })\r\n                  .on('receipt', function(receipt){\r\n                    document.getElementById(\"web3_message\").textContent=\"Success! Minting finished.\";    })\r\n                  .catch((revertReason) => {\r\n                 //   getRevertReason(revertReason.receipt.transactionHash);\r\n                  });\r\n              \r\n              }\r\n\r\n\r\n\r\n              render(){\r\n          return (\r\n                  <div className='card-pool-active row mt-2'> \r\n                        <div className='text-pool col-md-8 col-sm-12'>\r\n                           <h1 className='tittle-pool'>POOL : LEGENDARIO </h1> \r\n                           <h3><span id='poolNumero4'> - </span> /4</h3>\r\n                           <p> APY 100% 45 DAYS</p>\r\n                        </div>\r\n                        <div className='container-btn col-md-4 col-sm-12 mx-auto'>\r\n                            <button className='btn-pool col-sm-12  mt-4' >\r\n                               UnStake\r\n                           </button>\r\n                           <button  onClick={this.claimReward} className='btn-pool col-sm-12 mt-2' >\r\n                               Claim Reward\r\n                           </button>\r\n                        </div> \r\n\r\n                        <div className='nft-item col-md-12 row   mx-auto  '>\r\n                            <div className=' col-lg-3 col-md-6 mx-auto mint'  id=\"elem3\">\r\n                            \r\n                      </div>\r\n     \r\n       \r\n     </div> \r\n\r\n </div>\r\n    \r\n  \r\n  )\r\n}\r\n}\r\n\r\nexport default Pool3;","import React from 'react'\r\nimport '../assets/css/BalanceNft.css'\r\nimport robot from '../assets/img/robot.webm'\r\nimport Pool0 from \"../componetsButton/Pool0\"\r\nimport Pool1 from \"../componetsButton/Pool1\"\r\nimport Pool2 from \"../componetsButton/Pool2\"\r\nimport Pool3 from \"../componetsButton/Pool3\"\r\n\r\nconst BalanceNftP = () => {\r\n  return (\r\n\r\n    <div className='row pt-4 ml-2'>\r\n          <div className=\"col-md-12  \">\r\n                          \r\n         <Pool0/>\r\n         <Pool1/>\r\n         <Pool2/>\r\n         <Pool3/>\r\n\r\n           \r\n            \r\n        </div>\r\n  \r\n       \r\n    </div>\r\n  \r\n  )\r\n}\r\n\r\nexport default BalanceNftP","import React from 'react'\nimport '../assets/css/Card-mint.css'\nimport BalanceNftP from '../componetsButton/BalanceNftP'\n\nconst Workers = () => {\n  return (\n    <div className=\"container\">\n\n\n<div className='tittle-card ' >\n            <h1 className='tittle pt-4 text-center '> Robot Workers </h1>\n\n\n          </div>    \n\n       <BalanceNftP/> \n\n\n      \n      \n      \n    </div>\n  )\n}\n\nexport default Workers","import React, { Component } from 'react';\r\nimport nftToken from \"../abis/NFTERC721.json\"\r\nimport Web3 from 'web3';\r\nimport robot from '../assets/img/robot1.png'\r\nimport VideoLooper from 'react-video-looper'\r\n\r\n\r\n\r\n\r\nclass Mint0 extends Component  {\r\n    async componentWillMount() {\r\n        await this.loadWeb3()\r\n        await this.loadBlockchainData()\r\n      }\r\n    \r\n      async loadWeb3() {\r\n        if(window.ethereum) {\r\n          window.web3 = new Web3(window.ethereum)\r\n          await window.ethereum.enable()\r\n        }\r\n    \r\n        else if (window.web3) {\r\n          window.web3 = new Web3(window.web3.currentProvider)\r\n        }\r\n    \r\n        else {\r\n          window.alert('¡Considera usar Metamask!')\r\n        }\r\n    \r\n      }\r\n    \r\n      async loadBlockchainData(){\r\n        const web3 = window.web3\r\n        // Cargar una cuenta\r\n        const accounts = await web3.eth.getAccounts()\r\n        this.setState({account: accounts[0]})\r\n        const networkId = 56\r\n        const networkData = nftToken.networks[networkId]\r\n    \r\n              if(networkData) {\r\n                const abi = nftToken.abi\r\n          \r\n                const address = networkData.address\r\n              \r\n                const contract = new web3.eth.Contract(abi, address)\r\n\r\n                \r\n                const price00 = await contract.methods.PRICE().call()\r\n        \r\n                var robot0 = await contract.methods.returnRobot0().call()          \r\n                document.getElementById(\"robot0\").textContent=robot0\r\n              \r\n     \r\n                this.setState({contract})\r\n    \r\n              \r\n                \r\n              } else {\r\n                window.alert('¡Smart Contract no desplegado en la red!')\r\n              }\r\n            }\r\n    \r\n    \r\n       \r\n            constructor(props) {\r\n              super(props)\r\n              this.state = {\r\n                account: '',\r\n                contract: null,\r\n                totalSupply: 0,\r\n                balance: \"\",\r\n               \r\n              }\r\n            }\r\n\r\n//MINTEO DE ROBOT1\r\nasync mint0(){\r\n\r\n  const web3 = window.web3\r\n  const networkId = 56\r\n  const networkData = nftToken.networks[networkId]\r\n  const abi = nftToken.abi\r\n  const address = networkData.address\r\n  const contract = new web3.eth.Contract(abi, address)\r\n  const accounts = await web3.eth.getAccounts()\r\n\r\n  const price = await contract.methods.PRICE().call()\r\n      await contract.methods.mint2(accounts[0], 0, 0)\r\n       .send({ from: accounts[0], gas: 1111110, value: price})  \r\n   \r\n    \r\n   \r\n       .on('transactionHash', function(hash){\r\n         document.getElementById(\"web3_message\").textContent=\"Minting...\";\r\n       })\r\n       .on('receipt', function(receipt){\r\n         document.getElementById(\"web3_message\").textContent=\"Success! Minting finished.\";    })\r\n       .catch((revertReason) => {\r\n        // getRevertReason(revertReason.receipt.transactionHash);\r\n       });\r\n   }\r\n\r\n  \r\n  \r\n    render(){\r\n    return (\r\n      <div className=\"col-md-3  col-sm-6 marg\">\r\n        <div className=\"\">\r\n        <div className=\"card-mint\">\r\n          <p  style={{color:\"white\"}}><strong> <span id=\"robot0\"></span> /0 </strong></p>\r\n        <img style={{width:\"100%\"}} src={robot} ></img>\r\n        <p style={{color:\"white\", fontFamily:\"'Rajdhani', sans-serif\"}}><strong>PRICE:- BNB</strong>  </p>\r\n        \r\n            \r\n       \r\n     \r\n        </div>\r\n        </div>\r\n      </div>\r\n    );\r\n    }\r\n  }\r\n  \r\n  export default Mint0;\r\n  \r\n\r\n","import React, { Component } from 'react';\r\nimport nftToken from \"../abis/NFTERC721.json\"\r\nimport Web3 from 'web3';\r\nimport robot from '../assets/img/y31.png'\r\n\r\n\r\n\r\nclass Mint1 extends Component  {\r\n    async componentWillMount() {\r\n        await this.loadWeb3()\r\n        await this.loadBlockchainData()\r\n      }\r\n    \r\n      async loadWeb3() {\r\n        if(window.ethereum) {\r\n          window.web3 = new Web3(window.ethereum)\r\n          await window.ethereum.enable()\r\n        }\r\n    \r\n        else if (window.web3) {\r\n          window.web3 = new Web3(window.web3.currentProvider)\r\n        }\r\n    \r\n        else {\r\n          window.alert('¡Considera usar Metamask!')\r\n        }\r\n    \r\n      }\r\n    \r\n      async loadBlockchainData(){\r\n        const web3 = window.web3\r\n        // Cargar una cuenta\r\n        const accounts = await web3.eth.getAccounts()\r\n        this.setState({account: accounts[0]})\r\n        const networkId = 56\r\n        const networkData = nftToken.networks[networkId]\r\n    \r\n              if(networkData) {\r\n                const abi = nftToken.abi\r\n          \r\n                const address = networkData.address\r\n              \r\n                const contract = new web3.eth.Contract(abi, address)\r\n              \r\n                const price11 = await contract.methods.PRICE1().call()\r\n\r\n         \r\n           \r\n                this.setState({contract})\r\n                \r\n                \r\n                var robot1 = await contract.methods.returnRobot1().call()\r\n\r\n              \r\n                \r\n                document.getElementById(\"robot1\").textContent=robot1\r\n              \r\n                \r\n              } else {\r\n                window.alert('¡Smart Contract no desplegado en la red!')\r\n              }\r\n            }\r\n    \r\n    \r\n       \r\n            constructor(props) {\r\n              super(props)\r\n              this.state = {\r\n                account: '',\r\n                contract: null,\r\n                totalSupply: 0,\r\n                balance: \"\",\r\n               \r\n              }\r\n            }\r\n    \r\n    \r\n\r\n//MINTEO DE ROBOT1\r\nasync mint1(){\r\n\r\n  const web3 = window.web3\r\n  const networkId = 56\r\n  const networkData = nftToken.networks[networkId]\r\n  const abi = nftToken.abi\r\n  const address = networkData.address\r\n  const contract = new web3.eth.Contract(abi, address)\r\n  const accounts = await web3.eth.getAccounts()\r\n  const price1 = await contract.methods.PRICE1().call()\r\n      await contract.methods.mint2(accounts[0], 1, 1)\r\n       .send({ from: accounts[0], gas: 1111110, value: price1})  \r\n   \r\n    \r\n   \r\n       .on('transactionHash', function(hash){\r\n         document.getElementById(\"web3_message\").textContent=\"Minting...\";\r\n       })\r\n       .on('receipt', function(receipt){\r\n         document.getElementById(\"web3_message\").textContent=\"Success! Minting finished.\";    })\r\n       .catch((revertReason) => {\r\n        // getRevertReason(revertReason.receipt.transactionHash);\r\n       });\r\n   }\r\n\r\n  \r\n  \r\n    render(){\r\n    return (\r\n      <div className=\"col-md-3  col-sm-6 marg\">\r\n        <div className=\"\">\r\n        <div className=\"card-mint\">\r\n        <p  style={{color:\"white\"}}><strong> <span id=\"robot1\"></span> /0</strong></p>\r\n        <img style={{width:\"100%\"}} src={robot} ></img>\r\n        <p style={{color:\"white\"}}><strong>PRICE: -  BNB </strong></p>\r\n   \r\n        </div>\r\n        </div>\r\n      </div>\r\n    );\r\n    }\r\n  }\r\n  \r\n  export default Mint1;","import React, { Component } from 'react';\r\nimport nftToken from \"../abis/NFTERC721.json\"\r\nimport Web3 from 'web3';\r\nimport robot from '../assets/img/robot2.png'\r\n\r\n\r\n\r\nclass Mint2 extends Component  {\r\n    async componentWillMount() {\r\n        await this.loadWeb3()\r\n        await this.loadBlockchainData()\r\n      }\r\n    \r\n      async loadWeb3() {\r\n        if(window.ethereum) {\r\n          window.web3 = new Web3(window.ethereum)\r\n          await window.ethereum.enable()\r\n        }\r\n    \r\n        else if (window.web3) {\r\n          window.web3 = new Web3(window.web3.currentProvider)\r\n        }\r\n    \r\n        else {\r\n          window.alert('¡Considera usar Metamask!')\r\n        }\r\n    \r\n      }\r\n    \r\n      async loadBlockchainData(){\r\n        const web3 = window.web3\r\n        // Cargar una cuenta\r\n        const accounts = await web3.eth.getAccounts()\r\n        this.setState({account: accounts[0]})\r\n        const networkId = 56\r\n        const networkData = nftToken.networks[networkId]\r\n    \r\n              if(networkData) {\r\n                const abi = nftToken.abi\r\n          \r\n                const address = networkData.address\r\n              \r\n                const contract = new web3.eth.Contract(abi, address)\r\n              \r\n                const price22 = await contract.methods.PRICE2().call()\r\n   \r\n\r\n\r\n                var robot2 = await contract.methods.returnRobot2().call()\r\n\r\n              \r\n                \r\n                document.getElementById(\"robot2\").textContent=robot2\r\n         \r\n           \r\n                this.setState({contract})\r\n    \r\n              \r\n                \r\n              } else {\r\n                window.alert('¡Smart Contract no desplegado en la red!')\r\n              }\r\n            }\r\n    \r\n    \r\n       \r\n            constructor(props) {\r\n              super(props)\r\n              this.state = {\r\n                account: '',\r\n                contract: null,\r\n                totalSupply: 0,\r\n                balance: \"\",\r\n               \r\n              }\r\n            }\r\n    \r\n    \r\n\r\n//MINTEO DE ROBOT1\r\nasync mint2(){\r\n\r\n  const web3 = window.web3\r\n  const networkId = 56\r\n  const networkData = nftToken.networks[networkId]\r\n  const abi = nftToken.abi\r\n  const address = networkData.address\r\n  const contract = new web3.eth.Contract(abi, address)\r\n  const accounts = await web3.eth.getAccounts()\r\n  const price2 = await contract.methods.PRICE2().call()\r\n\r\n      await contract.methods.mint2(accounts[0], 2, 2)\r\n       .send({ from: accounts[0], gas: 1111110, value: price2})  \r\n   \r\n    \r\n   \r\n       .on('transactionHash', function(hash){\r\n         document.getElementById(\"web3_message\").textContent=\"Minting...\";\r\n       })\r\n       .on('receipt', function(receipt){\r\n         document.getElementById(\"web3_message\").textContent=\"Success! Minting finished.\";    })\r\n       .catch((revertReason) => {\r\n        // getRevertReason(revertReason.receipt.transactionHash);\r\n       });\r\n   }\r\n\r\n  \r\n  \r\n    render(){\r\n    return (\r\n      <div className=\"col-md-3  col-sm-6 marg\">\r\n      <div className=\"\">\r\n      <div className=\"card-mint\">\r\n      <p  style={{color:\"white\"}}><strong> <span id=\"robot2\"></span> /0 </strong></p>\r\n      <img style={{width:\"100%\"}} src={robot} ></img>\r\n      <p style={{color:\"white\"}}><strong>PRICE: -  BNB</strong></p>\r\n     \r\n        </div>\r\n        </div>\r\n      </div>\r\n    );\r\n    }\r\n  }\r\n  \r\n  export default Mint2;","import React, { Component } from 'react';\r\nimport nftToken from \"../abis/NFTERC721.json\"\r\nimport Web3 from 'web3';\r\nimport robot from '../assets/img/robot3.png'\r\n\r\n\r\n\r\nclass Mint3 extends Component  {\r\n    async componentWillMount() {\r\n        await this.loadWeb3()\r\n        await this.loadBlockchainData()\r\n      }\r\n    \r\n      async loadWeb3() {\r\n        if(window.ethereum) {\r\n          window.web3 = new Web3(window.ethereum)\r\n          await window.ethereum.enable()\r\n        }\r\n    \r\n        else if (window.web3) {\r\n          window.web3 = new Web3(window.web3.currentProvider)\r\n        }\r\n    \r\n        else {\r\n          window.alert('¡Considera usar Metamask!')\r\n        }\r\n    \r\n      }\r\n    \r\n      async loadBlockchainData(){\r\n        const web3 = window.web3\r\n        // Cargar una cuenta\r\n        const accounts = await web3.eth.getAccounts()\r\n        this.setState({account: accounts[0]})\r\n        const networkId = 56\r\n        const networkData = nftToken.networks[networkId]\r\n    \r\n              if(networkData) {\r\n                const abi = nftToken.abi\r\n          \r\n                const address = networkData.address\r\n              \r\n                const contract = new web3.eth.Contract(abi, address)\r\n              \r\n                const price33 = await contract.methods.PRICE3().call()\r\n                document.getElementById(\"price3\").textContent=price33/1000000000000000000\r\n            \r\n           \r\n                this.setState({contract})\r\n                \r\n                   \r\n                var robot3 = await contract.methods.returnRobot3().call()\r\n\r\n              \r\n                \r\n                document.getElementById(\"robot3\").textContent=robot3\r\n              \r\n              \r\n                \r\n              } else {\r\n                window.alert('¡Smart Contract no desplegado en la red!')\r\n              }\r\n            }\r\n    \r\n    \r\n       \r\n            constructor(props) {\r\n              super(props)\r\n              this.state = {\r\n                account: '',\r\n                contract: null,\r\n                totalSupply: 0,\r\n                balance: \"\",\r\n               \r\n              }\r\n            }\r\n    \r\n    \r\n\r\n//MINTEO DE ROBOT1\r\nasync mint3(){\r\n\r\n  const web3 = window.web3\r\n  const networkId = 56\r\n  const networkData = nftToken.networks[networkId]\r\n  const abi = nftToken.abi\r\n  const address = networkData.address\r\n  const contract = new web3.eth.Contract(abi, address)\r\n  const accounts = await web3.eth.getAccounts()\r\n  const price3 = await contract.methods.PRICE3().call()\r\n      await contract.methods.mint2(accounts[0], 3, 3)\r\n       .send({ from: accounts[0], gas: 1111110, value: price3})  \r\n   \r\n    \r\n   \r\n       .on('transactionHash', function(hash){\r\n         document.getElementById(\"web3_message\").textContent=\"Minting...\";\r\n       })\r\n       .on('receipt', function(receipt){\r\n         document.getElementById(\"web3_message\").textContent=\"Success! Minting finished.\";    })\r\n       .catch((revertReason) => {\r\n        // getRevertReason(revertReason.receipt.transactionHash);\r\n       });\r\n   }\r\n\r\n  \r\n  \r\n    render(){\r\n    return (\r\n      <div className=\"col-md-3 col-sm-6 marg\">\r\n      <div className=\"\">\r\n      <div className=\"card-mint\">\r\n      <p style={{color:\"white\"}}><strong> Robot A29 Legendario  </strong></p>\r\n      <p  style={{color:\"white\"}}><strong> <span id=\"robot3\"></span> /400 </strong></p>\r\n      <img style={{width:\"100%\"}} src={robot} ></img>\r\n      <p style={{color:\"white\"}}><strong>PRICE:   <span id=\"price3\"></span>  BNB </strong></p>\r\n        <button style={{margin:\"auto\"}} className='btn-mint blue' onClick={this.mint3}>\r\n        BUY\r\n        </button>\r\n        </div>\r\n        </div>\r\n      </div>\r\n    );\r\n    }\r\n  }\r\n  \r\n  export default Mint3;","import React from 'react'\nimport Mint0 from '../componetsButton/Mint0'\nimport Mint1 from '../componetsButton/Mint1'\nimport Mint2 from '../componetsButton/Mint2'\nimport Mint3 from '../componetsButton/Mint3'\nimport '../assets/css/Workers.css'\nimport '../assets/css/Card-mint.css'\n\n\nconst BountyNFT = () => {\n  return (\n   <div className='container' >\n     <div className='tittle-card ' >\n            <h1 className='tittle pt-4 text-center '> DROID NFT </h1>\n\n\n          </div>\n\n    <div className='row '>\n  \n      <Mint3></Mint3>\n      </div>\n      </div>\n     \n  )\n}\n\nexport default BountyNFT","import React from 'react'\r\nimport logo from '../assets/img/ISOLOGOTIPO.png'\r\nimport '../assets/css/CardSup.css'\r\nconst CardSup = () => {\r\n  return (\r\n    \r\n<div className=\"containers\">\r\n  <div className=\"cards\">\r\n    <div className=\"card-imgs\">\r\n      <a><img src={logo}/></a>\r\n      \r\n      \r\n    </div>\r\n    <div className=\"card-contents\">\r\n      <h2 className=\"big-titles\">SUPPORT</h2>\r\n      <h3 className=\"medium-titles\">FOR ANY REPORT OR CONTACT, COMMUNICATE WITH THE DEVS THROUGH THE DISCORD SERVER IN THE SUPPORT SECTION</h3>\r\n    </div>\r\n    \r\n    <div className='icons' > \r\n\r\n        <a href=\"https://t.me/erisGalaxyCo\" ><i className=\"fab fa-telegram-plane icons2\"></i></a>\r\n        <a href=\"https://twitter.com/GalaxyEris\" ><i className=\"fab fa-twitter icons2\"></i></a>\r\n        <a href=\"https://discord.com/invite/9CDkv4svYv\" ><i className=\"fab fa-discord icons2\"></i></a>\r\n        <a href=\"\" ><i className=\"fab fa-medium-m icons2\"></i></a>\r\n        <a href=\"https://www.instagram.com/erisgalaxyofficial/?hl=es-la\" ><i class=\"fab fa-instagram icons2\"></i></a>\r\n  </div>\r\n\r\n\r\n  </div>\r\n</div>\r\n  )\r\n}\r\n\r\nexport default CardSup","import React from 'react'\nimport CardSup from '../components/CarSup';\n\nconst Support = () => {\n  return (\n    <div className='container'>\n      <div className='row'>\n        <div className='col-md-12'>\n            <CardSup/> \n        </div>\n\n      </div>\n\n    </div>\n  )\n}\n\nexport default Support","import React from 'react'\r\n\r\nconst MarketPlace = () => {\r\n  return (\r\n    <div className='tittle-card ' >\r\n    <h1 className='tittle pt-4 text-center '> MARKET PLACE </h1>\r\n\r\n        <div>\r\n            <h4 className='tittle pt-4 text-center '>COMING SOON </h4>\r\n        </div>\r\n  </div>\r\n\r\n   \r\n  )\r\n}\r\n\r\nexport default MarketPlace","import React, { Component } from 'react';\nimport './App.css';\nimport {BrowserRouter ,Routes, Route} from 'react-router-dom';\nimport Layout from './Layout/Layout';\nimport Dashboard from './pages/Dashboard';\nimport Workers from './pages/Workers';\nimport BountyNFT from './pages/BountyNFT';\nimport Support from './pages/Support'\nimport MarketPlace from './pages/MarketPlace'\nimport { ToogleProvider } from './context/ToogleContex';\n\n\n\nclass App extends Component  {\n\n\n\n\n\n  render(){\n  return (\n \n     <ToogleProvider>\n        <BrowserRouter>\n          <Layout>\n              <Routes>\n                <Route path='/' element={<Dashboard/>}/>\n                <Route path='/workers' element={<Workers/>}/>\n                <Route path='/DroidNft' element={<BountyNFT/>}/>\n                <Route path='/Marketplace' element={<MarketPlace/>}/>\n                <Route path='/Support' element={<Support/>}/>\n              </Routes>\n          </Layout>      \n      </BrowserRouter>\n    </ToogleProvider>\n\n  );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css'; \n\nimport '../src/assets/css/Siderbar.css'\nimport '../src/assets/css/Topbar.css'\nimport '../src/assets/css/global.css'\nimport '../src/assets/css/WalletConnet.css'\nimport '../src/assets/css/Footer.css'\nimport '../src/assets/css/Workers.css'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","module.exports = __webpack_public_path__ + \"static/media/ISOLOGOTIPO.0491498a.png\";"],"sourceRoot":""}